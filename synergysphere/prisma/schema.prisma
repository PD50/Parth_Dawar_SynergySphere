// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String
  passwordHash String    @map("password_hash")
  avatarUrl    String?   @map("avatar_url")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  ownedProjects     Project[] @relation("ProjectOwner")
  memberships       Membership[]
  assignedTasks     Task[]     @relation("TaskAssignee")
  createdTasks      Task[]     @relation("TaskCreator")
  messages          Message[]
  messageReactions  MessageReaction[]
  notifications     Notification[]
  sentNotifications Notification[] @relation("NotificationSender")

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?
  status      String   @default("ACTIVE")
  ownerId     String   @map("owner_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  owner       User         @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  memberships Membership[]
  tasks       Task[]
  messages    Message[]
  notifications Notification[]

  @@map("projects")
}

model Membership {
  id        String   @id @default(cuid())
  projectId String   @map("project_id")
  userId    String   @map("user_id")
  role      String   @default("member")
  joinedAt  DateTime @default(now()) @map("joined_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("memberships")
}

model Task {
  id          String    @id @default(cuid())
  projectId   String    @map("project_id")
  title       String
  description String?
  assigneeId  String?   @map("assignee_id")
  creatorId   String    @map("creator_id")
  status      String    @default("TODO")
  priority    String    @default("MEDIUM")
  dueDate     DateTime? @map("due_date")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee User?   @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  creator  User    @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Message {
  id          String    @id @default(cuid())
  projectId   String    @map("project_id")
  authorId    String    @map("author_id")
  content     String
  parentId    String?   @map("parent_id")
  threadId    String?   @map("thread_id")
  mentions    Json
  attachments Json
  isEdited    Boolean   @default(false) @map("is_edited")
  editedAt    DateTime? @map("edited_at")
  deletedAt   DateTime? @map("deleted_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  project   Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  author    User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Message?          @relation("MessageThread", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Message[]         @relation("MessageThread")
  reactions MessageReaction[]

  @@map("messages")
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String   @map("message_id")
  userId    String   @map("user_id")
  emoji     String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@map("message_reactions")
}

model Notification {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  fromUserId   String?   @map("from_user_id")
  projectId    String?   @map("project_id")
  type         String
  title        String
  message      String
  data         Json
  isRead       Boolean   @default(false) @map("is_read")
  readAt       DateTime? @map("read_at")
  createdAt    DateTime  @default(now()) @map("created_at")

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromUser User?    @relation("NotificationSender", fields: [fromUserId], references: [id], onDelete: SetNull)
  project  Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("notifications")
}